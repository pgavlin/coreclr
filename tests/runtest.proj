<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="src\dir.props" />
  <Import Project="$(ToolsDir)Build.Post.targets" Condition="Exists('$(ToolsDir)Build.Post.targets') AND '$(BuildWrappers)' == 'true'" /> 
  <Import Project="helixperftasks.targets" Condition="'$(Performance)'=='true'"/> 
  <PropertyGroup>
    <XunitTestBinBase Condition="'$(XunitTestBinBase)'==''" >$(BaseOutputPathWithConfig)</XunitTestBinBase>
    <XunitWrapperGeneratedCSDirBase>$(XunitTestBinBase)\TestWrappers\</XunitWrapperGeneratedCSDirBase>
    <XunitWrapperOutputIntermediatedDirBase>$(XunitTestBinBase)\Tests\</XunitWrapperOutputIntermediatedDirBase>
    <MSBuildEnableAllPropertyFunctions>1</MSBuildEnableAllPropertyFunctions>
  </PropertyGroup>

  <!-- If we want to overwrite the desired CoreCLR package version, we need to get the new version from the generated props file in bin/obj -->
  <Import Condition="'$(OverwriteCoreClrPackageVersion)' == 'true'" Project="$(BuildVersionFile)" />

  <PropertyGroup Condition="'$(OverwriteCoreClrPackageVersion)' == 'true'">
    <VersionToRestore Condition="'$(StableVersion)' != ''">$(StableVersion)</VersionToRestore>
    <VersionToRestore Condition="'$(VersionToRestore)' == ''">$(PackageVersion)-$(PreReleaseLabel)-$(BuildNumberMajor)-$(BuildNumberMinor)</VersionToRestore>
    <DesiredPackageVersionArg>$(VersionToRestore)</DesiredPackageVersionArg>
  </PropertyGroup> 

  <Import Project="tests.targets" />
  <Import Project="publishdependency.targets" />

  <PropertyGroup>
    <DesiredPackageVersionArg Condition="'$(DesiredPackageVersionArg)' == ''">$(CoreClrPackageVersion)</DesiredPackageVersionArg>
  </PropertyGroup>

  <Target Name="CreateTestOverlay">
    <MSBuild Projects="$(MSBuildProjectFile)"
             Targets="CopyDependecyToCoreRoot"
             Properties="Language=C#;TargetRid=$(TargetRid)" />
  </Target>

  <Target Name="BinPlaceRef">
    <!-- Copy mscorlib.dll from TargetingPack to bin/Product/ref, if we're building against packages -->
    <MSBuild Projects="$(MSBuildProjectFile)"
             Targets="CopyDependencyToRef"
             Properties="Language=C#;TargetRid=$(TargetRid)"
             Condition=" '$(BuildTestsAgainstPackages)'=='true' " />
  </Target>

  <Target Name="BinPlaceProduct">
    <!-- Copy test dependencies to bin/Product, if we're building against packages -->
    <MSBuild Projects="$(MSBuildProjectFile)"
             Targets="CopyDependencyToProduct"
             Properties="Language=C#;TargetRid=$(TargetRid)"
             Condition=" '$(BuildTestsAgainstPackages)'=='true' " />
  </Target>

  <Target Name="RunPerfTests" Condition="'$(Performance)'=='true'">  
    <Message Text="Executing steps for perf tests" Importance="High"/>  
    
    <!-- generate project.json for runtime dependency -->  
    <MSBuild Projects="$(MSBuildProjectFile)"  
             Targets="CreateTestRuntimeJsonFile"/>  
     
    <!-- generate project.lock.json file corresponding to above json file -->
    <MSBuild Projects="src\Common\test_dependencies\test_dependencies.csproj"/>
    
    <!-- Package each perf test, upload it and trigger event to execute the tests -->  
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="UploadPerfAssemblies" />  
  </Target>  


  <Target Name="Build">
    <!-- Execution -->
    <MSBuild Projects="$(MSBuildProjectFile)"
             Targets="CreateTestOverlay"
             Condition=" '$(GenerateRuntimeLayout)'=='true' "/>
  </Target>

  <Target Name="Clean">
    <RemoveDir Condition=" '$(BuildWrappers)'=='true'" Directories="$(XunitWrapperGeneratedCSDirBase);$(XunitWrapperOutputIntermediatedDirBase)" ContinueOnError="WarnAndContinue" /> 
  </Target>
</Project>
